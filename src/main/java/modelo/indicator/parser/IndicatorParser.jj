options {
	STATIC=false;
    LOOKAHEAD = 100;
}

PARSER_BEGIN(IndicatorParser)
package modelo.indicator.parser;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.math.BigDecimal;

import modelo.indicator.math.*;
import modelo.indicator.IndicatorRepository;
import exceptions.FormulaErrorException;

@SuppressWarnings("unused")
public class IndicatorParser {
	public static Operable parseIndicator(String formula) {
	    Operable value = null;
        IndicatorParser parser = new IndicatorParser(new ByteArrayInputStream(formula.getBytes(StandardCharsets.UTF_8)));
        try{
         value = parser.Start();
        } catch(ParseException parseException){
        throw new FormulaErrorException(parseException.getMessage());
        }
        return value;
    }
}

PARSER_END(IndicatorParser)

SKIP :
{
  " "
}

TOKEN : /* LITERALS */
{
  < CONSTANT: (["0"-"9"])+ ("."(["0"-"9"])+)? >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* >
}

/** Main production. */
Operable Start()       : {Operable exp;}
{
  exp = Expression() <EOF>
  { return exp; }
}

Operable Expression() : {Operable op1, op2;}
{
    (op1 = Term() "+" op2 = Expression()) {return new Addition(op1, op2);} 
    |
    (op1 = Term() "-" op2 = Expression()) {return new Subtraction(op1, op2);}
    |
    op1 = Term() {return op1;}
}

Operable Term() : {Operable op1, op2;}
{
    (op1 = Factor() "*" op2 = Term()) {return new Multiplication(op1, op2);} 
    |
    (op1 = Factor() "/" op2 = Term()) {return new Division(op1, op2);}
    |
    op1 = Factor() {return op1;}
}

Operable Factor() : {Operable op;}
{
    ("(" op = Expression() ")") {return op;} 
    |
    op = Constant() {return op;}
    |
    op = Identifier() {return op;}
    |
    "-" op = Factor() {return new Negative(op);}
}

/** An Identifier. */
Operable Identifier() : {Operable op;}
{
	(op = Indicator() | op = Calculation()) {return op;}
}

Operable Indicator() : {Token t;}
{
	"@" t=<IDENTIFIER> { return IndicatorRepository.getInstance().getByName(t.image); }
}

Operable Calculation() : {Token t;}
{
	"#" t=<IDENTIFIER> { return new OperableCalculation(t.image);}
}

/** A Constant. */
Constant Constant()       : {Token t;}
{
  t=<CONSTANT> { return new Constant(new BigDecimal(t.image)); }
}
